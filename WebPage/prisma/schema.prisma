datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  PLACED
  IN_PROGRESS
  COMPLETED
  ACCEPTED
  DECLINED
  CANCELLED
}

enum GroupsRoles {
  OWNER
  MODERATOR
  MEMBER
  INVITED
}
enum NotificationTypes {
  ORDER_ASSIGNED
  ORDER_COMPLETED
  ORDER_ACCEPTED
  ORDER_DECLINED
  ORDER_IN_PROGRESS
  FRIEND_REQUEST
}

model User {
  id             String    @id @default(cuid())

  email          String    @unique
  firstName      String
  lastName       String
  userName       String

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  expiringAt DateTime

  password       Password?
  notes Note[]
  notifications Notification[] @relation("Recipient")
  createdOrders  Order[]  @relation("CreatedBy")
  workingOrders  Order[]  @relation("Worker")
  role String
  percentage String?

  warningAmount String
  firstWarning String?
  firstWarningDate DateTime?
  secondWarning String?
  secondWarningDate DateTime?
  thirdWarning String?
  thirdWarningDate DateTime?

  userStatus String
  banReason String?
  groups            GroupUser[]

  requestedFriendships FriendshipRequest[] @relation("RequestedFriendships")
  receivedFriendships  FriendshipRequest[]  @relation("ReceivedFriendships")
}

model Password {
  hash   String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Order {
  id          String  @id @default(cuid())
  orderName   String
  createdBy   User    @relation("CreatedBy", fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  worker      User    @relation("Worker", fields: [workerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId  String
  workerId    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  completionDate DateTime
  revisionDate   DateTime
  orderStatus OrderStatus
  description String?
  footageLink String
  
}

model SecretCodeAdmin {
  id    String @id @default(cuid())
  secretCode String
  customName String 
  email String
  contractNumber String
  role String
  percentage String?

  CreationData DateTime @default(now())
  ExpirationDate DateTime @default(now())
  Used Boolean @default(false)
}

model Notification {
  id String @id @default(cuid())

  recipient User @relation("Recipient", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  notificationType NotificationTypes
  isSeen Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model AdminLogs{
  id    String @id @default(cuid())
  user String
  information String

  createdAt DateTime @default(now())
}
model CustomMessage{
  id    String @id @default(cuid())
  name String
  priority String
  message String
  createdAt DateTime @default(now())
  visibility Boolean
}

model Groups{
  id String @id @default(cuid())
  groupName String @unique
  groupShortDescription String
  groupFullDescription String
  users                  GroupUser[]
  balance String
}

model GroupUser {
  id       String       @id @default(cuid())
  user     User         @relation(fields: [userId], references: [id])
  userId   String
  group    Groups       @relation(fields: [groupId], references: [id])
  groupId  String
  role     GroupsRoles // Define the role of the user within the group
  percentage String?
}



model FriendshipRequest {
  id            String   @id @default(cuid())
  requester     User     @relation("RequestedFriendships", fields: [requesterId], references: [id])
  requesterId   String
  requestedUser User     @relation("ReceivedFriendships", fields: [requestedUserId], references: [id])
  requestedUserId String
  status        FriendshipRequestStatus
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum FriendshipRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}